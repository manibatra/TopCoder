package practice;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class IncompleteBST
{
	public String missingValues(String[] tree)
	{

		Arrays.sort(tree, new Comparator<String>() {

			@Override
			public int compare(String o1, String o2) {
				if(Integer.parseInt(o1.substring(2)) > Integer.parseInt(o2.substring(2)))
				return 1;
				else
					return -1;
			}
		});
		
		System.out.println(Arrays.toString(tree));
		
		if(tree[0].charAt(2) != '1')
			return "";



		int missing = 0;

		String answer = "";

		for(int i = 1; i < tree.length; i++){

			if(tree[i].charAt(0) == '?')
				missing = i;

			String parent = checkParent(tree, i);
			if(parent.equals(""))
				return "";

			if(missing != 0){

				String leftChild = checkLeft(tree, i);
				String rightChild = checkRight(tree, i);
				answer = validChar(parent, leftChild, rightChild, tree[i]);
				return answer;


			}


		}
		
		if(missing == 0){
			String parent = "";
			String leftChild = checkLeft(tree, 0);
			String rightChild = checkRight(tree, 0);
			answer = validChar(parent, leftChild, rightChild, tree[0]);

			
			
		}


		return answer;

	}

	private String validChar(String parent, String leftChild, String rightChild, String current) {
		char lowerChar =' ';
		char upperChar =' ';
		String includeLower = "yes";
		String includeUpper = "yes";
		if(!parent.equals("")){
			String parentOrientation = checkOrientation(current, parent);
		
			
			if(parentOrientation.equals("left")){
				lowerChar = parent.charAt(0);
				if(lowerChar > leftChild.charAt(0))
					includeLower = "no";
				if(leftChild.charAt(0) != ' ')
				lowerChar = lowerChar > leftChild.charAt(0) ? lowerChar : leftChild.charAt(0);
				
				upperChar = rightChild.charAt(0) == ' ' ? 'Z' : rightChild.charAt(0);
				if(rightChild.charAt(0) != ' ')
					includeUpper = "no";
				return makeAns(lowerChar, upperChar, includeUpper, includeLower);
				
			} else{
				
				upperChar = parent.charAt(0);
				if(upperChar > rightChild.charAt(0) && !rightChild.equals(" "))
					includeUpper = "no";
				if(rightChild.charAt(0) != ' ')
				upperChar = upperChar < rightChild.charAt(0) ? upperChar : rightChild.charAt(0);
				
				lowerChar = leftChild.charAt(0) == ' ' ? 'A' : leftChild.charAt(0);
				
				return makeAns(lowerChar, upperChar, includeUpper, includeLower);


				
				
			}
		} else {
			
			upperChar = rightChild.charAt(0) == ' ' ? 'Z' : rightChild.charAt(0);
			lowerChar = leftChild.charAt(0) == ' ' ? 'A' : leftChild.charAt(0);
			if(rightChild.charAt(0) != ' ')
				includeUpper = "no";
			return makeAns(lowerChar, upperChar, includeUpper, includeLower);
			
			
			
			
		}
		
	}

	private String makeAns(char lowerChar, char upperChar,
			String includeUpper, String includeLower) {
		System.out.println(lowerChar +"   "+upperChar);
		if(lowerChar == upperChar)
			return ""+lowerChar;
		String answer ="";
		for(int i = lowerChar + 1; i < upperChar; i++)
			answer += (char)i;
		
		if(includeUpper.equals("yes"))
			answer += upperChar;
		if(includeLower.equals("yes"))
			answer = lowerChar + answer;
		
		return answer;
	}

	private String checkOrientation(String current, String parent) {
		
		if(Integer.parseInt(current.substring(2)) == Integer.parseInt(parent.substring(2))*2)
			return "right";
		else 
			return "left";
		
		
	}

	private String checkRight(String[] tree, int i) {
		int current = Integer.parseInt(tree[i].substring(2));

		for(int j = i; j < tree.length; j++){

			int number = Integer.parseInt(tree[j].substring(2));
			if(current*2 + 1 == number) {

				return tree[i];

			}

		}

		return " ";
	}

	private String checkLeft(String[] tree, int i) {

		int current = Integer.parseInt(tree[i].substring(2));

		for(int j = i; j < tree.length; j++){

			int number = Integer.parseInt(tree[j].substring(2));
			if(current*2 == number) {

				return tree[i];

			}

		}

		return " ";
	}

	private String checkParent(String[] tree, int i) {

		int current = Integer.parseInt(tree[i].substring(2));

		for(int j = 0; j < i; j++){

			int number = Integer.parseInt(tree[j].substring(2));
			if(current == number*2 && (tree[j].charAt(0) >= tree[i].charAt(0) || tree[i].charAt(0) == '?'))  {

				return tree[j];

			} else if(current == (number*2) + 1 && (tree[j].charAt(0) < tree[i].charAt(0) ||  tree[i].charAt(0) == '?'))
				return tree[j];

		}

		return "";

	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		IncompleteBST obj;
		String answer;
		obj = new IncompleteBST();
		long startTime = System.currentTimeMillis();
		answer = obj.missingValues(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String[] p0;
		String p1;

		// ----- test 0 -----
//		p0 = new String[]{"? 3", "K 1", "K 2", "K 4", "K 8", "K 16", "K 32", "K 64", "K 128"};
//		p1 = "LMNOPQRSTUVWXYZ";
//		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
//		// ------------------
//
////		// ----- test 1 -----
//		p0 = new String[]{"B 1","? 2"};
//		p1 = "AB";
//		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
////		// ------------------
////
////		// ----- test 2 -----
//		p0 = new String[]{"V 1","? 3"};
//		p1 = "WXYZ";
//		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
//		// ------------------
//
//		// ----- test 3 -----
		p0 = new String[]{"K 1","K 2","A 6","? 12","Y 3"};
		p1 = "";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
//		// ------------------
//
//		// ----- test 4 -----
		p0 = new String[]{"Z 1","Y 2","X 4","W 8","V 16","U 32","T 64","S 128","R 256","Q 512","P 1024","O 2048","N 4096","M 8192","L 16384","K 32768","J 65536","? 131072"};
		p1 = "ABCDEFGHIJ";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
