package practice;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TwoLLogo
{
	class Point{
		
		int row;
		int column;
		
		Point(int i, int j){
			
			this.row = i;
			this.column = j;
			
		}
		
		public String toString(){
			
			String temp = this.row+" ,"+this.column;
			return temp;
			
		}
		
		public boolean equals(Point o){
			
			if(this.row == o.row && this.column == o.column)
				return true;
			else
				return false;
			
			
		}
		
		
	}
	public long countWays(String[] grid)
	{
		
		List<HashSet<Point>> valids = new ArrayList<HashSet<Point>>();
		
		long result  = 0;
		
		for(int i = 0; i <= grid.length - 2; i++){
			
			for(int j = grid.length - 1; j >= (i +1); j--){
				
				for(int k = 0; k < grid[1].length() - 1; k++){
					
					for(int l = k + 1; l <= grid[1].length() - 1; l++){
						
						Point upperLeft = new Point(i, k);
						Point lowerRight = new Point(j, l);
						
						HashSet<Point> valid = checkForBlack(upperLeft, lowerRight, grid);
						if(valid == null)
							continue;
						else
							valids.add(valid);
						
					}
					
					
				}
				
			}
			
		}
		
		for(int i = 0; i < valids.size() - 1; i++){
			
			for(int j = i+1; j < valids.size(); j++){
				
				boolean intersection = checkIntersection(valids.get(i), valids.get(j));
				if(!intersection)
					result += 1;
				
			}
			
		}
		
		return result;
		
	}
	
	private boolean checkIntersection(HashSet<Point> logoOne,
			HashSet<Point> logoTwo) {
		
		for(Point x : logoOne){
			
			for(Point y : logoTwo){
				
				if(x.row == y.row && x.column == y.column)
					return true;
				
			}
			
		}
		
		
		return false;
	}

	private HashSet<Point> checkForBlack(Point upperLeft, Point lowerRight, String[] grid) {
		
		//System.out.println(upperLeft.toString()+" and "+lowerRight.toString());
		
		//String[] local = Arrays.copyOf(grid, grid.length);
		HashSet<Point> ans = new HashSet<Point>();
//		ans.add(lowerRight);
//		ans.add(upperLeft);
//		
		if(grid[upperLeft.row].charAt(upperLeft.column) == '#')
			return null;
		
		if(grid[lowerRight.row].charAt(lowerRight.column) == '#')
			return null;
		
		for(int i = upperLeft.row; i <= lowerRight.row; i++){
			
			if(grid[i].charAt(upperLeft.column) == '#')
				return null;
			else {
				
				ans.add(new Point(i, upperLeft.column));
//				char[] temp  = local[i].toCharArray();
//				temp[upperLeft.column] = 'V';
//				local[i] = new String(temp);
				
			}
			
			
		}
		
		for(int i = lowerRight.column; i >= upperLeft.column; i--){
			
			if(grid[lowerRight.row].charAt(i) == '#')
				return null;
			else {
				ans.add(new Point(lowerRight.row, i));
//				char[] temp  = local[lowerRight.row].toCharArray();
//				temp[i] = 'V';
//				local[lowerRight.row] = new String(temp);
				
			}
			
			
		}
		
//		for(String x : local){
//			
//			System.out.println(x);
//			
//		}
//		
//		local = null;

		return ans;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		TwoLLogo obj;
		long answer;
		obj = new TwoLLogo();
		long startTime = System.currentTimeMillis();
		answer = obj.countWays(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		long p1;
		
		// ----- test 0 -----
		p0 = new String[]{"....","...."};
		p1 = 1L;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
//		// ----- test 1 -----
		p0 = new String[]{".##..","...#.",".#.#.","#...#"};
		p1 = 3L;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
//		// ------------------
//		
//		// ----- test 2 -----
		p0 = new String[]{"..#.","#.#.","....","..#."};
		p1 = 4L;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
//		// ------------------
//		
//		// ----- test 3 -----
		p0 = new String[]{"..",".."};
		p1 = 0L;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
//		// ------------------
//		
//		// ----- test 4 -----
		p0 = new String[]{".#.#","....",".#.#","...."};
		p1 = 34L;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
//		// ------------------
//		
//		// ----- test 5 -----
		p0 = new String[]{"##############","##############","#.############","#.############","#.############","#.############","#.############","#.############","#.#####.######","#.#####.######","#.#####.######","#....##.######","#######.######","#######.######","#######.######","#######.######","#######.######","#######.######","#######......#","##############"};
		p1 = 1350L;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
//		// ------------------
//		
//		// ----- test 6 -----
		p0 = new String[]{"#......",".#....#",".#.#...","#....#.",".##..#.",".#.....",".....#.",".#.#...",".#...#.","..##..."};
		p1 = 2386L;
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
//		// ------------------
//		
//		// ----- test 7 -----
//		p0 = new String[]{"...#..........................","..............................","..............................","..................#...#.......","..................#...........","..............................","...........#..................","..............................",".....#..#.....................",".......................#......","..................#.....#.....","..............................","..............................","..............................","..............................","..#...........................","..............................","..............................","..............................","#............................#","..............................",".....#.........#............#.","..............................",".........................#....",".#............................",".............#................","..............................","..............................",".......................#......",".............#................"};
//		p1 = 5020791386L;
//		all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
//		// ------------------
//		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
